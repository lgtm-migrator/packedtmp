/*
 * Copyright (c) 2008 Kasper Nielsen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package app.packed.component;

import java.lang.invoke.MethodHandles;

import app.packed.base.NamespacePath;
import app.packed.inject.Factory;
import app.packed.inject.ServiceComponentConfiguration;
import packed.internal.component.PackedComponentDriver;

/**
 * An base component configuration class that can serve as basis for actual component configuration types. 
 * <p>
 * Component configuration classes do not need to extend this class.
 */
public class BaseComponentConfiguration extends ComponentConfiguration {
   
    @SuppressWarnings("rawtypes")
    private static final BindableComponentDriver INSTALL_DRIVER = PackedComponentDriver.ofInstance(MethodHandles.lookup(), ServiceComponentConfiguration.class, PackedComponentDriver.Option.constantSource());
    
    /** A driver for this configuration. */
    @SuppressWarnings("rawtypes")
    private static final BindableComponentDriver STATELESS_DRIVER = PackedComponentDriver.ofClass(MethodHandles.lookup(), BaseComponentConfiguration.class,
            PackedComponentDriver.Option.statelessSource());
    
    /**
     * Creates a new base component configuration.
     * 
     * @param context
     *            the configuration context for the component
     */
    public BaseComponentConfiguration(ComponentConfigurationContext context) {
        super(context);
    }

    /**
     * Checks that the component is still configurable or throws an {@link IllegalStateException}.
     * <p>
     * A component is typically only configurable inside of {@link Assembly#build()}.
     * 
     * @throws IllegalStateException
     *             if the component is no long configurable.
     */
    public void checkConfigurable() {
        context.checkConfigurable();
    }

    /**
     * Returns the name of the component. If no name has previously been set via {@link #setName(String)} a name is
     * automatically generated by the runtime as outlined in {@link #setName(String)}.
     * <p>
     * Trying to call {@link #setName(String)} after invoking this method will result in an {@link IllegalStateException}
     * being thrown.
     * 
     * @return the name of the component
     * @see #setName(String)
     */
    public String getName() {
        return context.getName();
    }


    /**
     * Returns the full path of the component.
     * <p>
     * Once this method has been invoked, the name of the component can no longer be changed via {@link #setName(String)}.
     * <p>
     * If building an image, the path of the instantiated component might be prefixed with another path.
     * 
     * <p>
     * Returns the path of this configuration. Invoking this method will initialize the name of the component. The component
     * path returned does not maintain any reference to this configuration object.
     * 
     * @return the path of this configuration.
     */
    public NamespacePath path() {
        return context.path();
    }

    /**
     * Sets the {@link Component#name() name} of the component. The name must consists only of alphanumeric characters and
     * '_', '-' or '.'. The name is case sensitive.
     * <p>
     * If no name is set using this method. A name will be assigned to the component when the component is initialized, in
     * such a way that it will have a unique name other sibling components.
     *
     * @param name
     *            the name of the component
     * @return this configuration
     * @throws IllegalArgumentException
     *             if the specified name is the empty string, or if the name contains other characters then alphanumeric
     *             characters and '_', '-' or '.'
     * @see #getName()
     * @see Component#name()
     */
    public BaseComponentConfiguration setName(String name) {
        context.setName(name);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public String toString() {
        return context.toString();
    }

    /**
     * Returns a driver that can be used to create stateless components.
     * 
     * @param <T>
     *            the type
     * @return a driver
     */
    @SuppressWarnings("unchecked")
    private static <T> BindableComponentDriver<BaseComponentConfiguration, T> driver() {
        return STATELESS_DRIVER;
    }

    // Not sure we want this public or ma
    @SuppressWarnings("unchecked")
    public static final ComponentDriver<BaseComponentConfiguration> driverInstall(Class<?> implementation) {
        return INSTALL_DRIVER.bind(implementation);
    }

    @SuppressWarnings("unchecked")
    public static final ComponentDriver<BaseComponentConfiguration> driverInstall(Factory<?> factory) {
        return INSTALL_DRIVER.bind(factory);
    }
    
    @SuppressWarnings("unchecked")
    public static final ComponentDriver<BaseComponentConfiguration> driverInstallInstance(Object instance) {
        return INSTALL_DRIVER.applyInstance(instance);
    }
    
    public static ComponentDriver<BaseComponentConfiguration> driverStateless(Class<?> implementation) {
        return driver().bind(implementation);
    }
}
