/*
 * Copyright (c) 2008 Kasper Nielsen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package app.packed.component;

import app.packed.base.Nullable;
import app.packed.config.ConfigSite;
import app.packed.container.ContainerConfiguration;
import app.packed.inject.Factory;

/** A bundle that uses a ComponentConfiguration as the underlying configuration object. */
public abstract class ComponentBundle<T extends ComponentConfiguration> extends Bundle<T> {

    /**
     * Creates a new bundle using the supplied driver.
     * 
     * @param driver
     *            the driver to use for constructing the bundles configuration object
     */
    protected ComponentBundle(ComponentDriver<? extends T> driver) {
        super(driver);
    }

    protected <X> ComponentBundle(SourcedComponentDriver<X, ? extends T> driver, X instance) {
        super(driver, instance);
    }

    protected <X> ComponentBundle(SourcedComponentDriver<X, ? extends T> driver, Class<X> implementation) {
        super(driver, implementation);
    }

    protected <X> ComponentBundle(SourcedComponentDriver<X, ? extends T> driver, Factory<X> implementation) {
        super(driver, implementation);
    }

    /**
     * Checks that the {@link #configure()} method has not already been invoked. This is typically used to make sure that
     * users of extensions does not try to configure the extension after it has been configured.
     * 
     * @throws IllegalStateException
     *             if {@link #configure()} has been invoked
     * @see ContainerConfiguration#checkConfigurable()
     */
    protected final void checkConfigurable() {
        configuration().checkConfigurable();
    }

    /**
     * Returns the configuration site of this bundle.
     * 
     * @return the configuration site of this bundle
     * @see ContainerConfiguration#configSite()
     */
    protected final ConfigSite configSite() {
        return configuration().configSite();
    }

    /**
     * Returns any description that has been set.
     * 
     * @return any description that has been set
     * @see #setDescription(String)
     * @see ContainerConfiguration#getDescription()
     */
    @Nullable
    protected final String getDescription() {
        return configuration().getDescription();
    }

    /**
     * Returns the name of the container. If no name has previously been set via {@link #setName(String)} a name is
     * automatically generated by the runtime as outlined in {@link #setName(String)}.
     * <p>
     * Trying to call {@link #setName(String)} after invoking this method will result in an {@link IllegalStateException}
     * being thrown.
     * 
     * @return the name of the container
     * @see #setName(String)
     * @see ContainerConfiguration#setName(String)
     */
    protected final String getName() {
        return configuration().getName();
    }

    /**
     * Returns the full path of the container that this bundle creates.
     * 
     * @return the full path of the container that this bundle creates
     * @see ContainerConfiguration#path()
     */
    protected final ComponentPath path() {
        return configuration().path();
    }

    /**
     * Sets the description of the container.
     * 
     * @param description
     *            the description to set
     * @see ContainerConfiguration#setDescription(String)
     * @see #getDescription()
     */
    protected final void setDescription(String description) {
        configuration().setDescription(description);
    }

    /**
     * Sets the name of the container. The name must consists only of alphanumeric characters and '_', '-' or '.'. The name
     * is case sensitive.
     * <p>
     * This method should be called as the first thing when configuring a container.
     * <p>
     * If no name is set using this method. A name will be assigned to the container when the container is initialized, in
     * such a way that it will have a unique name among other sibling container.
     *
     * @param name
     *            the name of the container
     * @see #getName()
     * @see ContainerConfiguration#setName(String)
     * @throws IllegalArgumentException
     *             if the specified name is the empty string, or if the name contains other characters then alphanumeric
     *             characters and '_', '-' or '.'
     * @throws IllegalStateException
     *             if called from outside {@link #configure()}
     */
    protected final void setName(String name) {
        configuration().setName(name);
    }

    protected final void xLink(Bundle<?> bundle, Wirelet... wirelets) {
        ContainerConfiguration cc = xWire(ContainerConfiguration.driver(), Wirelet.name("HejHej"));
        cc.install(String.class);
    }

    protected final <C extends ComponentConfiguration> C xWire(ComponentDriver<C> driver, Wirelet... wirelets) {
        throw new UnsupportedOperationException();
    }
}
